local map = vim.keymap.set

map("", "<Space>", "<Nop>") -- disable space because leader

-- Normal --
-- Standard Operations
map("n", "<leader>w", "<cmd>w<cr>", { desc = "Save" })
map("n", "<leader>q", "<cmd>q<cr>", { desc = "Quit" })
map("n", "<leader>h", "<cmd>nohlsearch<cr>", { desc = "No Highlight" })
map("n", "<leader>fn", "<cmd>enew<cr>", { desc = "New File" })
map("n", "<C-s>", "<cmd>w!<cr>", { desc = "Force write" })
map("n", "<C-q>", "<cmd>q!<cr>", { desc = "Force quit" })

-- Moving Text
map('', '<C-k>', ':m .-2<CR>==')
map('', '<C-j>', ':m .+1<CR>==')
map('v', '<C-j>', ":m '>+1<CR>gv=gv")
map('v', '<C-k>', ":m '<-2<CR>gv=gv")

-- Manage your windows like a boss
map('n', '<leader>sv', ':vsplit<CR>')
map('n', '<leader>sh', ':split<CR>')
map('n', '<up>', ':resize +2<CR>')
map('n', '<down>', ':resize -2<CR>')
map('n', '<left>', ':vertical resize -2<CR>')
map('n', '<right>', ':vertical resize +2<CR>')

-- Packer
map("n", "<leader>pc", "<cmd>PackerCompile<cr>", { desc = "Packer Compile" })
map("n", "<leader>pi", "<cmd>PackerInstall<cr>", { desc = "Packer Install" })
map("n", "<leader>ps", "<cmd>PackerSync<cr>", { desc = "Packer Sync" })
map("n", "<leader>pS", "<cmd>PackerStatus<cr>", { desc = "Packer Status" })
map("n", "<leader>pu", "<cmd>PackerUpdate<cr>", { desc = "Packer Update" })

-- NvimTree
map("n", "<leader>e", "<cmd>NvimTreeToggle<cr>", { desc = "Toggle Explorer" })
map("n", "<leader>o", "<cmd>NvimTreeFocus<cr>", { desc = "Focus Explorer" })
map("n", "<leader>r", "<cmd>NvimTreeRefresh<cr>", { desc = "Refresh Explorer" })

-- LSP
map('n', '<leader>dn', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>')
map('n', '<leader>dp', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>')
map('n', '<leader>ds', '<cmd>lua vim.diagnostic.open_float()<CR>')
map('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>zz')
map('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>')
map('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>')
map('n', 'gw', '<cmd>lua vim.lsp.buf.document_symbol()<CR>')
map('n', 'gW', '<cmd>lua vim.lsp.buf.workspace_symbol()<CR>')
map('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>')
map('n', 'gt', '<cmd>lua vim.lsp.buf.type_definition()<CR>')
map('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>')
map('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>')
map('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>')
map("n", "<leader>f", "<cmd>lua vim.lsp.buf.formatting()<cr>", { desc = "Format Buffer" })

-- Telescope
map("n", "<leader>fw", function()
	require("telescope.builtin").live_grep()
end, { desc = "Search words" })
map("n", "<leader>gt", function()
	require("telescope.builtin").git_status()
end, { desc = "Git status" })
map("n", "<leader>gb", function()
	require("telescope.builtin").git_branches()
end, { desc = "Git branchs" })
map("n", "<leader>gc", function()
	require("telescope.builtin").git_commits()
end, { desc = "Git commits" })
map("n", "<leader>ff", function()
	require("telescope.builtin").find_files()
end, { desc = "Search files" })
map("n", "<leader>fb", function()
	require("telescope.builtin").buffers()
end, { desc = "Search buffers" })
map("n", "<leader>fh", function()
	require("telescope.builtin").help_tags()
end, { desc = "Search help" })
map("n", "<leader>fm", function()
	require("telescope.builtin").marks()
end, { desc = "Search marks" })
map("n", "<leader>fo", function()
	require("telescope.builtin").oldfiles()
end, { desc = "Search history" })
map("n", "<leader>sb", function()
	require("telescope.builtin").git_branches()
end, { desc = "Git branchs" })
map("n", "<leader>sh", function()
	require("telescope.builtin").help_tags()
end, { desc = "Search help" })
map("n", "<leader>sm", function()
	require("telescope.builtin").man_pages()
end, { desc = "Search man" })
map("n", "<leader>sn", function()
	require("telescope").extensions.notify.notify()
end, { desc = "Search notifications" })
map("n", "<leader>sr", function()
	require("telescope.builtin").registers()
end, { desc = "Search registers" })
map("n", "<leader>sk", function()
	require("telescope.builtin").keymaps()
end, { desc = "Search keymaps" })
map("n", "<leader>sc", function()
	require("telescope.builtin").commands()
end, { desc = "Search commands" })
map("n", "<leader>ls", function()
	local aerial_avail, _ = pcall(require, "aerial")
	if aerial_avail then
		require("telescope").extensions.aerial.aerial()
	else
		require("telescope.builtin").lsp_document_symbols()
	end
end, { desc = "Search symbols" })
map("n", "<leader>lR", function()
	require("telescope.builtin").lsp_references()
end, { desc = "Search references" })
map("n", "<leader>lD", function()
	require("telescope.builtin").diagnostics()
end, { desc = "Search diagnostics" })

-- Stay in indent mode
map("v", "<", "<gv", { desc = "unindent line" })
map("v", ">", ">gv", { desc = "indent line" })

-- Improved Terminal Mappings
map("t", "<esc>", "<C-\\><C-n>", { desc = "Terminal normal mode" })
map("t", "jk", "<C-\\><C-n>", { desc = "Terminal normal mode" })
map("t", "<C-h>", "<c-\\><c-n><c-w>h", { desc = "Terminal left window navigation" })
map("t", "<C-j>", "<c-\\><c-n><c-w>j", { desc = "Terminal down window navigation" })
map("t", "<C-k>", "<c-\\><c-n><c-w>k", { desc = "Terminal up window navigation" })
map("t", "<C-l>", "<c-\\><c-n><c-w>l", { desc = "Terminal right window naviation" })
